{% load static %}
<!DOCTYPE html>
<html>
<head>
    <title>Serial Data Display</title>
    <script src="{% static 'jquery-jquery-f79d5f1/dist/jquery.min.js' %}"></script>
</head>

<body style="background-color:#1a7d9e;">
    <div id="notification" style="display: none; background-color: yellow; color: black; padding: 10px; border-radius: 5px; position: fixed; top: 20px; margin-left: 500px;">
    </div>
    <div class="box-0">
    <center style="margin-top: 30px; color: white; text-shadow: 2px 2px 4px #000000;">
        <h1><b>COMPORT SETTINGS</b></h1>
    </center>
    </div>
    <div id="status-message" style="color: red; font-weight: bold; margin-top: 10px;"></div>


    <form id="comport-form">
        {% csrf_token %}
        <div id="frame1" style="border: 2px solid black; padding: 50px; margin-left: 380px;width: 480px;background-color:lightpink;">
            
            <label for="card"><b>CARD</b> </label>
            <select id="card" name="card" style="width: 200px; margin-left: 65px;margin-top: 10px;">
                <option value="LVDT_4CH" selected>LVDT 4CH</option>
                <option value="PIEZO_4CH">PIEZO 4CH</option>
            </select>
            <br><br>
            
            
            <label for="com_port"><b>COMPORT-NO</b> </label>
            <select id="com_port" name="com_port" style="width: 200px;">
                {% for port in com_ports %}
                    <option value="{{ port }}">{{ port }}</option>
                {% endfor %}
            </select>
            <br>
    
            <label for="baud_rate"><b>BAUD RATE</b> </label>
            <select id="baud_rate" name="baud_rate" style="width: 200px;margin-top: 10px; margin-left: 15px;">
                {% for rate in baud_rates %}
                <option id="baud-rate-{{ rate }}" value="{{ rate }}">{{ rate }}</option>
                {% endfor %}
            </select>
            <br>
    
            <label for="parity"><b>PARITY</b> </label>
            <select id="parity" name="parity" style="width: 200px; margin-left: 47px;margin-top: 10px;">
                <option value="N">None</option>
                <option value="E">Even</option>
                <option value="O">Odd</option>
                <option value="M">Mark</option>
                <option value="S">Space</option>
            </select>
            <br>

            <label for="stopbit"><b>STOPBIT</b> </label>
            <select id="stopbit" name="stopbit" style="width: 200px;margin-top: 10px; margin-left: 38px;">
                <option value="1">1</option>
                <option value="1.5">1.5</option>
                <option value="2">2</option>
            </select>
            <br>

            <label for="databit"><b>DATABIT</b> </label>
            <select id="databit" name="databit" style="width: 200px;margin-top: 10px; margin-left: 37px;">
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8" >8</option>
            </select>
            <br>
            <br>
            <textarea id="serial-data-display" cols="50" rows="10" readonly></textarea>

            
            <br>
            <a href="{% url 'index' %}" style="text-decoration: none;">
                <button type="button" id="cancel-button" style="background-color: red; color: white;margin-top: 10px;height: 30px; width: 200px;"><b>BACK</b></button>
            </a>
            <button type="button" id="start-button" style="background-color: green; color: white;margin-top: 10px;height: 30px; width: 200px;"><b>OK</b></button>
            <!-- <button id="delete">DELETE</button> -->
        </div>
    </form>

    <script>



document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll("select").forEach(select => {
        select.addEventListener("focus", function () {
            let rect = this.getBoundingClientRect(); // Get current position of select box
            let optionCount = Math.min(this.options.length, 8); // Show max 8 options at a time
            let optionHeight = 30; // Approximate height of each option in px
            let totalHeight = optionCount * optionHeight;

            // Create a floating dropdown
            this.style.overflowY = "auto"; // Enable scrolling inside dropdown
            this.style.height = `${totalHeight}px`; // Set height for visible options
            this.size = optionCount; // Expand dropdown
            this.style.top = `${rect.top - totalHeight}px`; // Move dropdown above

            // Prevent page scroll when dropdown is open
            document.body.style.overflow = "hidden";
        });

        select.addEventListener("blur", function () {
            this.style.zIndex = "1";
            this.style.overflow = "hidden";
            this.style.height = "30px"; // Reset height
            this.size = 1; // Collapse dropdown

            // Restore page scrolling
            document.body.style.overflow = "auto";
        });

        select.addEventListener("change", function () {
            this.blur(); // Collapse after selection
        });
    });
});




// document.getElementById('delete').addEventListener('click', function () {
//     // Confirm deletion before proceeding
//     if (confirm('Are you sure you want to delete all COM port settings?')) {
//         // Send a DELETE request to the comport view
//         fetch('/comport/', {
//             method: 'DELETE',
//             headers: {
//                 'X-CSRFToken': '{{ csrf_token }}',  // Include CSRF token for Django
//                 'Content-Type': 'application/json'
//             },
//         })
//         .then(response => {
//             if (response.ok) {
//                 return response.json();
//             } else {
//                 throw new Error('Failed to delete the records.');
//             }
//         })
//         .then(data => {
//             // Display a success message or handle the response
//             alert(data.message);
//             console.log(data.message);
//         })
//         .catch(error => {
//             // Handle errors
//             alert('An error occurred: ' + error.message);
//             console.error('Error:', error);
//         });
//     }
// });


$(document).ready(function() {
    function fetchComportData(selectedCard) {
        $.ajax({
            url: '{% url "comport" %}',  
            type: 'GET',
            data: { 'card': selectedCard },
            dataType: 'json',
            success: function(response) {
                if (response.filtered_data.length > 0) {  
                    console.log("Filtered Data:", response.filtered_data);
                    
                    let data = response.filtered_data[0];  

                    // ** Clear all select inputs before updating them **
                    $('#com_port').val('');
                    $('#baud_rate').val('');
                    $('#parity').val('');
                    $('#stopbit').val('');
                    $('#databit').val('');

                    // ** Handle COM port selection logic **
                    let availableComPorts = [];
                    $('#com_port option').each(function() {
                        availableComPorts.push($(this).val());
                    });

                    if (availableComPorts.includes(data.com_port)) {
                        $('#com_port').val(data.com_port).change();
                    } else {
                        $('#com_port').append(`<option value="${data.com_port}" selected>${data.com_port}</option>`).change();
                    }

                    // ** Update other select boxes with retrieved values **
                    $('#baud_rate').val(data.baud_rate).change();
                    $('#parity').val(data.parity).change();
                    $('#stopbit').val(data.stopbits).change();
                    $('#databit').val(data.bytesize).change();

                } else {
                    console.log("No data found for the selected card.");
                }
            },
            error: function(xhr, status, error) {
                console.log("Error fetching data: " + error);
            }
        });
    }

    // ** Fetch data on page load **
    let initialCard = $('#card').val();  
    if (initialCard) {
        fetchComportData(initialCard);
    }

    // ** Fetch data when the card selection changes **
    $('#card').on('change', function() {
        let selectedCard = $(this).val();
        fetchComportData(selectedCard);
    });
});



document.getElementById('start-button').addEventListener('click', function () {
    // Collect form data
    const formData = {
        card: document.getElementById('card').value,
        com_port: document.getElementById('com_port').value,
        baud_rate: document.getElementById('baud_rate').value,
        parity: document.getElementById('parity').value,
        stopbit: document.getElementById('stopbit').value,
        databit: document.getElementById('databit').value,
    };
    console.log('Your data is this:', formData);

    // AJAX POST request
    fetch('{% url "comport" %}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': '{{ csrf_token }}',
        },
        body: JSON.stringify(formData),
    })
        .then((response) => response.json())
        .then((data) => {
            const notification = document.getElementById('notification');
            notification.innerText = data.message;
            notification.style.display = 'block';

            // Hide the notification after 3 seconds
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);

            // Update selected option with count display
            const selectedOption = document.getElementById('baud-rate-' + formData.baud_rate);
            if (selectedOption) {
                const currentCount = parseInt(selectedOption.dataset.count || '0', 10) + 1;
                selectedOption.dataset.count = currentCount;
                selectedOption.textContent = formData.baud_rate ;
            }
        })
        .catch((error) => console.error('Error:', error));
});
       

document.getElementById('start-button').addEventListener('click', function() {
        // Get the selected baud rate
        var baudRateSelect = document.getElementById('baud_rate');
        var selectedBaudRate = baudRateSelect.value;
        
        // Get the option element corresponding to the selected baud rate
        var selectedOption = document.getElementById('baud-rate-' + selectedBaudRate);

        // Update the selected option with a count display
        var currentCount = parseInt(selectedOption.dataset.count || '0', 10) + 1;
        selectedOption.dataset.count = currentCount;

        // Optionally, update the display to show the count next to the baud rate
        selectedOption.textContent = selectedBaudRate + ' (' + currentCount + ')';
    });
    $(document).ready(function () {
    const ws = new WebSocket('ws://localhost:8000/ws/comport/');

    ws.onmessage = function(event) {
        const data = JSON.parse(event.data);

        if (data.message) {
            let comPort = data.com_port;  // Get COM port number
            let message = data.message;


            let errorMatch = message.match(/Invalid data length.*for (\w+)\./);
            if (errorMatch) {
                let cardId = errorMatch[1]; // Extract card ID (e.g., PIEZO_4CH)
                // console.log(`Error detected for card: ${cardId}. Deleting from database...`);
                
                // Send AJAX request to delete the card ID from the database
                fetch('/comport/', {  // Ensure this URL matches your Django backend route
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}',
                    },
                    body: JSON.stringify({ card_id: cardId }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data.message);
                })
                .catch(error => console.error('Error:', error));
            }


            // Extract channel IDs (A-K with + or -)
            let matches = message.match(/[A-K][\+\-]\d+/g);
            
            let channelLength = matches ? matches.length : 0; // Get the number of channels detected
            
            // console.log(`COM ${comPort}: ${message} (Channel Length: ${channelLength})`);

            // Display message in the textarea with COM port info
            let displayText = `COM ${comPort}: ${message} (Channel Length: ${channelLength})\n`;

            // Update textarea content while preserving previous messages
            let currentText = $('#serial-data-display').val();
            $('#serial-data-display').val(currentText + displayText);

            // Auto-scroll to bottom of textarea
            scrollToBottom();

            // Update respective input field dynamically
            if (matches) {
                matches.forEach(channelData => {
                    let channelId = channelData.charAt(0);  // Extract A-K
                    let value = channelData.substr(2);  // Extract numeric value

                    // Update input field dynamically
                    $(`#probe-${channelId}`).val(value);
                });
            }
        }
    };

    $('#start-button').click(function () {
        const card = $('#card').val();
        const comPort = $('#com_port').val();
        const baudRate = $('#baud_rate').val();
        const parity = $('#parity').val();
        const stopbit = $('#stopbit').val();
        const databit = $('#databit').val();

        ws.send(JSON.stringify({
            command: 'start_serial',
            card:card,
            com_port: comPort,
            baud_rate: baudRate,
            parity: parity,
            stopbit: stopbit,
            databit: databit
        }));
    });

    function scrollToBottom() {
        const textarea = $('#serial-data-display');
        textarea.scrollTop(textarea[0].scrollHeight);
    }

    setInterval(function(){
        $('#serial-data-display').val('');
    },500);
   
});

//////////////////////////////////////////////////////////////////////////////////



 // JavaScript to update the select boxes based on the selected card

 


    </script>

</body>
</html>